#include <bits/stdc++.h>
using namespace std;
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define MOD 1000000007
#define INF 1e18
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define F first
#define S second
#define PI 3.141592653589793238462
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define FOR(i,a,b) for (int i = a; i < b; i++)
#define memset(a, b) memset(a,b,sizeof(a))
#define debug(x) cout << '[' << #x << ':' << x << ']' << endl;
typedef unsigned long int ul;
typedef long long int ll;
typedef unsigned long long int ull;
typedef long double lld;
ll mod_add(ll a,ll b,ll m)
{
a = a % m;
b = b % m;
return (((a + b) % m) + m) % m;
}
ll mod_mul(ll a,ll b,ll m)
{
a = a % m;
b = b % m;
return (((a * b) % m) + m) % m;
}
ll mod_sub(ll a,ll b,ll m)
{
a = a % m;
b = b % m;
return (((a - b) % m) + m) % m;
}

int wordBreakUtil(string A, unordered_set<string> &st) {

        int n = A.length();
        if(!n)
            return 1;
        
        for(int i = 1 ; i <= n; i++)
        {
            if((st.find(A.substr(0, i)) != st.end()) && (wordBreakUtil(A.substr(i, n),st)))
                return 1;
        }
        
        return 0;
        
    }

    int wordBreak(string A, vector<string> &B) {
        unordered_set<string> st(B.begin(),B.end());
        
        int n = A.length();
        
        vector<bool> dp(n, false);
        
        for(int i = 0 ; i <= n; i++)
        {
            if(dp[i] == false)
            {
                if(st.find(A.substr(0,i)) != st.end())
                    dp[i] = true;
            }
            
            if(dp[i])
            {
                for(int j = i + 1; j<=n; j++)
                {
                    if(!dp[j] && st.find(A.substr(i, j - i)) != st.end())
                        dp[j] = true;
                }
            }
            
            if(dp[n] == true)
                return true;
        }
        
        
        return dp[n];
    }
 
int main()
{
fastio();
fstream file;
    string word, t, q, filename;
    vector<string> v;
  
    // filename of the file
    filename = "file.txt";
  
    // opening file
    file.open(filename.c_str());
  
    // extracting words from the file
    while (file >> word)
    {
        cout<<word<<' ';
        v.push_back(word);
    }

    for (int i = 0; i < v.size(); i++)
    {

        if(wordBreak(v[i],v))
            cout<<v[i]<<' ';
    }
    
return 0;
}